{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validate","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","hasValid","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","initMovie","setMovie","pattern","test","onSubmit","preventDefault","newMovie","trim","newCount","disabled","App","moviesFromServer","setMovies","currentMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d33cb67c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validate?: (newValue: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validate = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValid = validate(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || (touched && !hasValid),\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {(!hasError && touched && !hasValid && (required || touched)) && (\n        <p className=\"help is-danger\">{`${label} are invalid URLs`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n// import classNames from 'classnames';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const initMovie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const [movie, setMovie] = useState(initMovie);\n\n  const reset = () => {\n    setMovie(initMovie);\n  };\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const hasError = !movie.title\n  || !pattern.test(movie.imgUrl)\n  || !pattern.test(movie.imdbUrl)\n  || !movie.imdbId;\n\n  const validate = (value: string) => pattern.test(value);\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newMovie: Movie = {\n      title: movie.title,\n      description: movie.description,\n      imgUrl: movie.imgUrl.trim(),\n      imdbUrl: movie.imdbUrl.trim(),\n      imdbId: movie.imdbId.trim(),\n    };\n\n    onAdd(newMovie);\n    setCount((newCount) => newCount + 1);\n    reset();\n  };\n\n  return (\n    <form className=\"NewMovie\" onSubmit={onSubmit} key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={(value) => setMovie({ ...movie, title: value })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={(value) => setMovie({ ...movie, description: value })}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={(value) => setMovie({ ...movie, imgUrl: value })}\n        validate={validate}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"IMDb URL\"\n        value={movie.imdbUrl}\n        onChange={(value) => setMovie({ ...movie, imdbUrl: value })}\n        validate={validate}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"IMDb ID\"\n        value={movie.imdbId}\n        onChange={(value) => setMovie({ ...movie, imdbId: value })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={hasError}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\n\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies(currentMovie => [...currentMovie, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}